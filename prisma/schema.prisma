// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String    @unique
  isModerator  Boolean   @default(false)
  isAdmin      Boolean   @default(false)
  posts        Post[]
  comments     Comment[]
  messages     Message[]
  chats        Chat[]
  profile      Profile?

  @@map("user")
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique

  @@map("profile")
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  content   String
  published Boolean   @default(false)
  author    User      @relation(fields: [userId], references: [id])
  topic     Topic     @relation(fields: [topicId], references: [id])
  comments  Comment[]
  userId    Int
  topicId   Int

  @@map("post")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  edited    Boolean  @default(false)
  userId    Int
  postId    Int

  @@map("comment")
}

model Topic {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  posts       Post[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  @@map("topic")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  topics      Topic[]

  @@map("category")
}

model Chat {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  users       User[]
  messages    Message[]

  @@map("chat")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])
  userId    Int
  chatId    Int

  @@map("message")
}
